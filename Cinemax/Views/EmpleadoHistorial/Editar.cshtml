
@{
    ViewBag.Title = "Editar";
    Layout = "~/Views/Shared/_LayoutEmpleado.cshtml";
}

@model Cinemax.ViewModels.EditarReservaViewModel

@using (Html.BeginForm("Editar", "EmpleadoHistorial", FormMethod.Post, new { @class = "purple-form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID_Reserva)
    @Html.HiddenFor(model => model.PeliculaCambiada)
    @Html.HiddenFor(model => model.FuncionCambiada)
    @Html.HiddenFor(model => model.PeliculaNombre)
    @Html.HiddenFor(model => model.EstadoNombre)
    @Html.HiddenFor(model => model.ID_Pelicula)
    @Html.HiddenFor(model => model.ID_Funcion)
    @Html.HiddenFor(model => model.FechaSeleccionada)
    @Html.HiddenFor(model => model.HoraSeleccionada)



<div class="form-container">
    <div class="form-section">
        <h3 class="section-title">Información de la Película</h3>
        <div class="form-group">
            <label class="form-label">Película Actual:</label>
            <p class="form-control-static current-value">@Model.PeliculaNombre</p>
        </div>
    </div>
    <div class="form-section">
        <h3 class="section-title">Información de la Función</h3>
        <div class="form-group">
            <label class="form-label">Función Actual:</label>
            <p class="form-control-static current-value">
                @Model.FuncionFecha
            </p>
            @Html.HiddenFor(model => model.ID_Funcion)
        </div>
    </div>


    <div class="form-section">
        <h3 class="section-title">Detalles de la Reserva</h3>
        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Precio, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Precio, new { @class = "form-control", @readonly = "readonly" })
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.SalaNombre, "Sala", new { @class = "form-label" })
                @Html.TextBoxFor(model => model.SalaNombre, new { @class = "form-control", @readonly = "readonly" })
            </div>
        </div>
    </div>

    <div class="panel panel-primary">
        <div class="panel-heading">
            <h3 class="panel-title" style="font-size: 14px; margin-top: 15px">Gestión de Asientos</h3>
        </div>
        <div>
            <div class="panel-body">
                <!-- Layout visual de la sala de cine -->
                <div class="cinema-layout" id="cinemaLayout">
                    <div class="screen">PANTALLA</div>

                    <div class="seats-grid" id="seatsGrid">
                        <!-- Los asientos se generarán dinámicamente aquí -->
                    </div>

                    <div class="legend">
                        <div class="legend-item">
                            <div class="legend-seat available"></div>
                            <span>Disponible</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-seat selected"></div>
                            <span>Seleccionado</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-seat reserved"></div>
                            <span>Ocupado</span>
                        </div>
                    </div>
                </div>

                <!-- Información de selección -->
                <div class="selection-info" id="selectionInfo">
                    <div class="selection-summary">
                        <div>
                            <strong>Asientos seleccionados:</strong>
                            <span class="selected-seats" id="selectedSeatsDisplay">
                                @(Model.AsientosSeleccionados != null && Model.AsientosSeleccionados.Any()
                                    ? string.Join(", ", Model.AsientosSeleccionados)
                                    : "Ninguno")
                            </span>
                        </div>
                        <div class="total-price" id="totalPrice">Total: $@((Model.AsientosSeleccionados?.Count ?? 0) * Model.Precio)</div>
                    </div>
                </div>

                <!-- Campo oculto para el formulario -->
                @Html.HiddenFor(model => model.AsientosSeleccionadosTexto, new { id = "asientosSeleccionados" })

                <!-- Botones de acción -->
                <div class="form-group" style="margin-top: 15px;">
                    <button type="button" class="btn btn-warning" id="btnLimpiarAsientos" style="margin-bottom:25px">Limpiar Selección</button>
                </div>
            </div>
        </div>
    </div>

    <div class="form-section">
        <h3 class="section-title">Otros Datos</h3>
        <div class="form-group">
            @Html.LabelFor(model => model.QR, new { @class = "form-label" })
            @Html.TextBoxFor(model => model.QR, new { @class = "form-control" })
        </div>

        <div class="form-group">
            <label class="form-label">Estado Actual:</label>
            <p class="form-control-static current-value">@Model.EstadoNombre</p>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Estado, "Cambiar Estado", new { @class = "form-label" })
            @Html.DropDownListFor(model => model.Estado, Model.Estados, new { @class = "form-control dropdown" })
        </div>
    </div>

    <div class="form-actions">
        <button type="submit" name="action" value="guardar" class="btn btn-primary btn-save">
            <i class="fas fa-save"></i> Guardar Cambios
        </button>
        @Html.ActionLink("Cancelar", "Detalles", "EmpleadoPDF", new { id = Model.ID_Reserva }, new { @class = "btn btn-default btn-cancel" })
    </div>
</div>

    @Html.Hidden("cambioPelicula", "false", new { id = "cambioPelicula" })
    @Html.Hidden("cambioFecha", "false", new { id = "cambioFecha" })
    @Html.Hidden("cambioHora", "false", new { id = "cambioHora" })


}


<style>
    .purple-form {
        background-color: #f3e5f5;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .form-container {
        max-width: 900px;
        margin: 0 auto;
    }

    .form-section {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .section-title {
        color: #6a1b9a;
        font-size: 1.2rem;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #e1bee7;
    }

    .form-label {
        color: #4a148c;
        font-weight: 500;
    }

    .current-value {
        font-weight: bold;
        color: #6a1b9a;
        padding: 8px;
        background-color: #f3e5f5;
        border-radius: 4px;
    }

    .form-control {
        border-radius: 4px;
        border: 1px solid #ce93d8;
    }

    .dropdown {
        cursor: pointer;
    }

    .asientos-textarea {
        background-color: #fafafa;
    }

    .btn-primary {
        background-color: #7b1fa2;
        border-color: #7b1fa2;
    }

        .btn-primary:hover {
            background-color: #6a1b9a;
            border-color: #6a1b9a;
        }

    .btn-danger {
        background-color: #d32f2f;
        border-color: #d32f2f;
    }

    .btn-default {
        background-color: #e1bee7;
        border-color: #ce93d8;
        color: #4a148c;
    }

        .btn-default:hover {
            background-color: #ce93d8;
            border-color: #ba68c8;
        }

    .form-actions {
        text-align: right;
        margin-top: 20px;
    }

    .btn-save {
        padding: 8px 20px;
    }

    .btn-cancel {
        padding: 8px 20px;
        margin-left: 10px;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -15px;
        margin-left: -15px;
    }

    .col-md-6 {
        flex: 0 0 50%;
        max-width: 50%;
        padding-right: 15px;
        padding-left: 15px;
    }

    .input-group {
        margin-bottom: 10px;
    }

    .cinema-layout {
        text-align: center;
        background: #f3e5f5;
        padding: 30px 20px;
        border-radius: 8px;
        margin: 20px 0;
    }

    .screen {
        background: #f8f9fa;
        color: #333;
        padding: 8px 20px;
        margin: 0 auto 30px;
        border-radius: 20px 20px 5px 5px;
        font-weight: bold;
        font-size: 14px;
        max-width: 200px;
        border: 2px solid #ddd;
    }

    .seats-grid {
        display: inline-block;
        margin: 0 auto;
    }

    .row {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 8px;
    }

    .row-label {
        color: #333;
        font-weight: bold;
        width: 30px;
        text-align: center;
        font-size: 16px;
    }

    .seat {
        width: 28px;
        height: 28px;
        margin: 2px;
        border: none;
        border-radius: 6px 6px 0 0;
        cursor: pointer;
        font-size: 10px;
        font-weight: bold;
        transition: all 0.2s ease;
        position: relative;
    }

        .seat.available {
            background-color: #dc3545;
            color: white;
        }

            .seat.available:hover {
                background-color: #c82333;
                transform: scale(1.1);
            }

        .seat.selected {
            background-color: #28a745;
            color: white;
        }

        .seat.occupied {
            background-color: #6c757d;
            color: #adb5bd;
            cursor: not-allowed;
        }

        

    
    .legend {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
        flex-wrap: wrap;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 8px;
        color: #333;
        font-size: 12px;
    }

    .legend-seat {
        width: 20px;
        height: 20px;
        border-radius: 4px 4px 0 0;
    }

        .legend-seat.available {
            background-color: #dc3545;
        }

        .legend-seat.selected {
            background-color: #28a745;
        }

       .seat.reserved {
        background-color: #6c757d;
        color: #adb5bd;
        cursor: not-allowed;
        }

    .legend-seat.reserved {
        background-color: #6c757d;
    }

       

    .selection-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 4px;
        margin-top: 15px;
    }

    .selection-summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
    }

    .selected-seats {
        color: #28a745;
        font-weight: bold;
    }

    .total-price {
        color: #007bff;
        font-weight: bold;
        font-size: 16px;
    }

    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-info {
        color: #31708f;
        background-color: #d9edf7;
        border-color: #bce8f1;
    }

    .seat {
        width: 24px;
        height: 24px;
        font-size: 8px;
    }

    .legend {
        gap: 10px;
    }

    .selection-summary {
        flex-direction: column;
        align-items: flex-start;
    }
</style>


@section Scripts{
    <script>

    let asientosSeleccionados = [];
    let asientosDisponiblesData = [];
    let precioActual = @Model.Precio;
    let funcionId = @Model.ID_Funcion;
    let asientosReservados = @Html.Raw(Json.Encode(Model.AsientosSeleccionados ?? new List<string>()));

    $(document).ready(function() {
      
        cargarAsientosVisual(funcionId);

    
        $('#btnLimpiarAsientos').click(function() {
            limpiarSeleccionAsientos();
        });
    });

    function cargarAsientosVisual(funcionId) {
        if (!funcionId) {
            return;
        }

        $.ajax({
            url: '@Url.Action("ObtenerAsientosDisponiblesParaEdicion")',
            type: 'POST',
            data: {
                funcionId: funcionId,
                reservaId: @Model.ID_Reserva
            },
            success: function (asientos) {
                asientosDisponiblesData = asientos;
                generarSalaVisual(asientos);
            },
            error: function() {
                alert("Error al cargar los asientos disponibles.");
            }
        });
    }

        function generarSalaVisual(asientos) {
            const seatsGrid = document.getElementById('seatsGrid');
            seatsGrid.innerHTML = '';

            if (!asientos || asientos.length === 0) {
                seatsGrid.innerHTML = '<div style="color: white; padding: 20px;">No hay asientos disponibles para esta función</div>';
                return;
            }

          
            const asientosPorFila = {};
            asientos.forEach(asiento => {
                const fila = asiento.Fila;
                if (!asientosPorFila[fila]) {
                    asientosPorFila[fila] = [];
                }
                asientosPorFila[fila].push(asiento);
            });

    
            const filasOrdenadas = Object.keys(asientosPorFila).sort();

    
            filasOrdenadas.forEach(fila => {
                const rowDiv = document.createElement('div');
                rowDiv.className = 'row';

        
                const rowLabel = document.createElement('div');
                rowLabel.className = 'row-label';
                rowLabel.textContent = fila;
                rowDiv.appendChild(rowLabel);

          
                const asientosFila = asientosPorFila[fila].sort((a, b) => a.Numero - b.Numero);

            
                asientosFila.forEach(asiento => {
                    const seatButton = document.createElement('button');
                    seatButton.className = `seat ${asiento.Estado}`;
                    seatButton.setAttribute('data-seat-id', asiento.Id);
                    seatButton.setAttribute('data-seat-name', asiento.Nombre);
                    seatButton.textContent = asiento.Numero;
                    seatButton.title = `Asiento ${asiento.Nombre}`;
                    seatButton.type = 'button';

               
                    switch (asiento.Estado) {
                        case 'available':
                            seatButton.addEventListener('click', () => toggleAsiento(asiento));
                            break;
                        case 'reserved':
                           
                            asientosSeleccionados.push(asiento);
                            break;
                        case 'occupied':
                            seatButton.disabled = true;
                            seatButton.title += ' (Ocupado)';
                            break;
                    }

                    rowDiv.appendChild(seatButton);
                });

                seatsGrid.appendChild(rowDiv);
            });

            actualizarInterfazSeleccion();
        }
    function toggleAsiento(asiento) {
        const index = asientosSeleccionados.findIndex(a => a.Id === asiento.Id);
        const seatButton = document.querySelector(`[data-seat-id="${asiento.Id}"]`);

        if (index > -1) {
           
            asientosSeleccionados.splice(index, 1);
            seatButton.className = 'seat available';
        } else {
           
            asientosSeleccionados.push(asiento);
            seatButton.className = 'seat selected';
        }

        actualizarInterfazSeleccion();
    }

    function actualizarInterfazSeleccion() {
        const selectedSeatsDisplay = document.getElementById('selectedSeatsDisplay');
        const totalPrice = document.getElementById('totalPrice');
        const asientosSeleccionadosInput = document.getElementById('asientosSeleccionados');

    
        const asientosOrdenados = asientosSeleccionados
            .map(a => a.Nombre)
            .sort();

       
        if (asientosOrdenados.length === 0) {
            selectedSeatsDisplay.textContent = 'Ninguno';
        } else {
            selectedSeatsDisplay.textContent = asientosOrdenados.join(', ');
        }

        const total = asientosOrdenados.length * precioActual;
        totalPrice.textContent = `Total: $${total.toLocaleString()}`;

    
        asientosSeleccionadosInput.value = asientosOrdenados.join(',');
    }

    function limpiarSeleccionAsientos() {
        asientosSeleccionados = [];

        
        document.querySelectorAll('.seat.selected').forEach(seat => {
            seat.className = 'seat available';
        });

     
        document.querySelectorAll('.seat.reserved').forEach(seat => {
            const seatId = seat.getAttribute('data-seat-id');
            const seatName = seat.getAttribute('data-seat-name');
            asientosSeleccionados.push({
                Id: seatId,
                Nombre: seatName,
                Estado: 'Reservado'
            });
        });

        actualizarInterfazSeleccion();
    }
    </script>
}